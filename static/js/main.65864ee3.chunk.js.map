{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","require","App","className","to","exact","path","component","Home","About","Component","props","defaults","qs","parse","location","search","ignoreQueryPrefix","terms","split","separator","quotes","filter","Boolean","selectedTheme","themes","selectedLanguages","id","languages","defaultIds","indexOf","selectedDatabase","databases","Object","keys","state","translations","searchQuery","plainSearchQuery","handleKeyDown","bind","handleTermsChange","handleThemeChange","handleLanguagesChange","handleDatabaseChange","this","length","updateTranslations","languageIds","push","join","history","replace","i","term","consultWiktionary","separatePage","encodeURIComponent","fetch","then","res","json","result","translationsCopy","JSON","stringify","termTranslations","query","pages","setState","updateSearchQuery","pageId","revisions","section","languageId","findTranslations","RegExp","foundTranslations","exec","j","cleanTranslation","values","some","e","error","console","log","queryParts","dynamicTerms","includeTerms","excludeTerms","map","dynamicSubpart","group","groupPart","dynamicTerm","key","reduce","prev","curr","includeSubpart","staticTerm","excludeSubpart","queryPart","innerText","event","window","href","target","value","updateParams","checked","isChecked","selectedLanguagesCopy","selectedId","htmlFor","onKeyDown","defaultValue","onChange","TermsInput","minLength","debounceTimeout","autoFocus","type","placeholder","ThemeButton","handleChange","htmlId","name","ThemeButtonsList","buttons","LanguageCheckbox","LanguageCheckboxesList","englishName","DatabaseSelector","options","SearchButton","disabled","SaveDefaultsBar","process","SearchQueryPanel","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.65864ee3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { DebounceInput } from \"react-debounce-input\";\nimport innerText from \"react-innertext\";\nimport split from \"split-string\";\nimport qs from \"qs\";\n\nimport \"./App.scss\";\n\nconst data = require(\"./data.json\");\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\n            <Link className=\"navbar-brand\" to=\"/\">Hyperquery</Link>\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/about\" component={About} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    let defaults = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\n\n    let terms = [];\n    if (\"terms\" in defaults) {\n      terms = split(defaults[\"terms\"], {\n        separator: \" \",\n        quotes: [ \"\\\"\" ]\n      }).filter(Boolean);\n    }\n\n    let selectedTheme = null;\n    if (\"theme\" in defaults) {\n      if (defaults[\"theme\"] in data.themes) {\n        selectedTheme = defaults[\"theme\"];\n      }\n    }\n\n    let selectedLanguages = {};\n    for (let id in data.languages) {\n      selectedLanguages[id] = true;\n    }\n    if (\"languages\" in defaults) {\n      let defaultIds = defaults[\"languages\"].split(\",\");\n      for (let id in selectedLanguages) {\n        if (defaultIds.indexOf(id) >= 0) {\n          selectedLanguages[id] = true;\n        } else {\n          selectedLanguages[id] = false;\n        }\n      }\n    }\n\n    let selectedDatabase = data.databases ? Object.keys(data.databases)[0] : null;\n    if (\"database\" in defaults) {\n      if (defaults[\"database\"] in data.databases) {\n        selectedDatabase = defaults[\"database\"];\n      }\n    }\n\n    this.state = {\n      terms: terms,\n      translations: {},\n      selectedTheme: selectedTheme,\n      selectedLanguages: selectedLanguages,\n      selectedDatabase: selectedDatabase,\n      searchQuery: null,\n      plainSearchQuery: null,\n    };\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleTermsChange = this.handleTermsChange.bind(this);\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n    this.handleLanguagesChange = this.handleLanguagesChange.bind(this);\n    this.handleDatabaseChange = this.handleDatabaseChange.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.terms.length > 0) {\n      this.updateTranslations();\n    }\n  }\n\n  updateParams() {\n    let languageIds = [];\n    for (let id in data.languages) {\n      if (this.state.selectedLanguages[id]) {\n        languageIds.push(id);\n      }\n    }\n    let path = \"/?theme=\" + (this.state.selectedTheme || \"\") + \"&languages=\" + languageIds.join(\",\") + \"&database=\" + (this.state.selectedDatabase || \"\") + \"&terms=\" + this.state.terms.join(\" \");\n    this.props.history.replace(path);\n  }\n\n  updateTranslations() {\n    for (let i in this.state.terms) {\n      let term = this.state.terms[i];\n      if (!(term in this.state.translations)) {\n        this.consultWiktionary(term, false);\n      }\n    }\n  }\n\n  consultWiktionary(term, separatePage) {\n    let path = \"https://en.wiktionary.org/w/api.php?origin=*&format=json&action=query&rvprop=content&prop=revisions&redirects=1&titles=\" + encodeURIComponent(term.replace(/\"/g, \"\"));\n    if (separatePage) {\n      path = path + \"/translations\";\n    }\n    fetch(path)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          let translationsCopy = JSON.parse(JSON.stringify(this.state.translations));\n          let termTranslations = translationsCopy[term] || {};\n          if (!result || !result.query || !result.query.pages) {\n            translationsCopy[term] = termTranslations;\n            this.setState({\n              translations: translationsCopy\n            }, () => {\n              this.updateSearchQuery();\n            });\n            return null;\n          }\n          for (let pageId in result.query.pages) {\n            if (!result.query.pages[pageId].revisions) {\n              continue;\n            }\n            let section = result.query.pages[pageId].revisions[0][\"*\"];\n            for (let languageId in data.languages) {\n              termTranslations[languageId] = [];\n              let findTranslations = new RegExp(\"(?:{{t(?:\\\\+)?\\\\|\" + languageId + \"\\\\|)([^|{}\\n]+)\", \"g\");\n              let foundTranslations;\n              while ((foundTranslations = findTranslations.exec(section)) !== null) {\n                if (foundTranslations.length > 0) {\n                  for (let j = 0; j < foundTranslations.length; j++) {\n                    if (foundTranslations[j] && foundTranslations[j].length > 0 && foundTranslations[j][0] !== \"{\") {\n                      let cleanTranslation = foundTranslations[j].replace(/[[\\]]/g, \"\");\n                      if (cleanTranslation.split(\" \").length > 1) {\n                        cleanTranslation = \"\\\"\" + cleanTranslation + \"\\\"\";\n                      }\n                      if (termTranslations[languageId].indexOf(cleanTranslation) === -1) {\n                        termTranslations[languageId].push(cleanTranslation);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (Object.values(termTranslations).some(e => e.length > 0)) {\n            translationsCopy[term] = termTranslations;\n            this.setState({\n              translations: translationsCopy\n            }, () => {\n              this.updateSearchQuery();\n            });\n          } else {\n            this.consultWiktionary(term, true);\n          }\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  }\n\n  updateSearchQuery() {\n    let queryParts = []\n    for (let languageId in data.languages) {\n      if (this.state.selectedLanguages[languageId]) {\n        let dynamicTerms = [];\n        let includeTerms = [];\n        let excludeTerms = [];\n\n        if (languageId === \"en\") {\n          dynamicTerms = this.state.terms.map(e => [e]);\n        } else {\n          for (let i in this.state.terms) {\n            let term = this.state.terms[i];\n            if (this.state.translations[term] && this.state.translations[term][languageId] && this.state.translations[term][languageId].length > 0) {\n              dynamicTerms.push(this.state.translations[term][languageId]);\n            } else {\n              dynamicTerms.push([term]);\n            }\n          }\n        }\n\n        if (this.state.selectedTheme) {\n          includeTerms = [...data.languages[languageId][\"terms\"][this.state.selectedTheme][\"include\"]];\n          excludeTerms = [...data.languages[languageId][\"terms\"][this.state.selectedTheme][\"exclude\"]];\n        }\n\n        let dynamicSubpart = null;\n        if (dynamicTerms.length > 0) {\n          dynamicSubpart = dynamicTerms.map((group) => {\n            if (group.length > 1) {\n              let groupPart = group.map(dynamicTerm =>\n                <span key={[languageId, dynamicTerm]} className=\"dynamic\">{dynamicTerm}</span>\n              ).reduce((prev, curr) => [prev, \" OR \", curr]);\n              return <span key={[languageId, group]}>{\"(\"}{groupPart}{\")\"}</span>;\n            } else {\n              return (\n                <span key={[languageId, group]} className=\"dynamic\">{group[0]}</span>\n              );\n            }\n          }).reduce((prev, curr) => [prev, \" AND \", curr]);\n          if (dynamicTerms.length > 1) {\n            dynamicSubpart = <span key={[languageId, dynamicTerms]}>{\"(\"}{dynamicSubpart}{\")\"}</span>;\n          }\n        } else {\n          continue;\n        }\n\n        let includeSubpart = null;\n        if (includeTerms.length > 0) {\n          includeSubpart = includeTerms.map((staticTerm) => (\n            <span key={[languageId, staticTerm]} className=\"static\">{staticTerm}</span>\n          )).reduce((prev, curr) => [prev, \" OR \", curr]);\n          if (includeTerms.length > 1) {\n            includeSubpart = <span key={[languageId, includeTerms]}>{\"(\"}{includeSubpart}{\")\"}</span>;\n          }\n        }\n\n        let excludeSubpart = null;\n        if (excludeTerms.length > 0) {\n          excludeSubpart = excludeTerms.map((staticTerm) => (\n            <span key={[languageId, staticTerm]} className=\"static\">{staticTerm}</span>\n          )).reduce((prev, curr) => [prev, \" OR \", curr]);\n          if (excludeTerms.length > 1) {\n            excludeSubpart = <span key={[languageId, excludeTerms]}>{\"(\"}{excludeSubpart}{\")\"}</span>;\n          }\n        }\n\n        let queryPart = null;\n        if (includeSubpart) {\n          if (excludeSubpart) {\n            queryPart = (\n              <span key={languageId}>\n                {\"(\"}{dynamicSubpart}{\" AND \"}{includeSubpart}{\" AND NOT \"}{excludeSubpart}{\")\"}\n              </span>\n            );\n          } else {\n            queryPart = (\n              <span key={languageId}>\n                {\"(\"}{dynamicSubpart}{\" AND \"}{includeSubpart}{\")\"}\n              </span>\n            );\n          }\n        } else {\n          queryPart = dynamicSubpart;\n        }\n        queryParts.push(queryPart);\n      }\n    }\n\n    if (queryParts.length > 0) {\n      let searchQuery = queryParts.reduce((prev, curr) => [prev, \" OR \", curr]);\n      this.setState({\n        searchQuery: searchQuery,\n        plainSearchQuery: innerText(searchQuery)\n      });\n    } else {\n      this.setState({\n        searchQuery: null,\n        plainSearchQuery: null\n      });\n    }\n  }\n\n  handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      if (this.state.plainSearchQuery && this.state.selectedDatabase) {\n        let path = data.databases[this.state.selectedDatabase][\"base_url\"] + encodeURIComponent(this.state.plainSearchQuery);\n        window.location.href = path;\n      }\n    }\n  }\n\n  handleTermsChange(event) {\n    let terms = split(event.target.value, {\n      separator: \" \",\n      quotes: [ \"\\\"\" ]\n    }).filter(Boolean);\n    this.setState({\n      terms: terms\n    }, () => {\n      this.updateTranslations();\n      this.updateSearchQuery();\n      this.updateParams();\n    });\n  }\n\n  handleThemeChange(event, id) {\n    if (event.target.checked) {\n      this.setState({\n        selectedTheme: id\n      }, () => {\n        this.updateSearchQuery();\n        this.updateParams();\n      });\n    }\n  }\n\n  handleLanguagesChange(isChecked, id) {\n    let selectedLanguagesCopy = JSON.parse(JSON.stringify(this.state.selectedLanguages));\n    selectedLanguagesCopy[id] = isChecked;\n    this.setState({\n      selectedLanguages: selectedLanguagesCopy\n    }, () => {\n      this.updateTranslations();\n      this.updateSearchQuery();\n      this.updateParams();\n    });\n  }\n\n  handleDatabaseChange(selectedId) {\n    this.setState({\n      selectedDatabase: selectedId\n    }, () => {\n      this.updateParams();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md mt-3 mb-3\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"terms-input\">Search for works about</label>\n                    <TermsInput onKeyDown={this.handleKeyDown} defaultValue={this.state.terms} onChange={this.handleTermsChange} />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>that engage with</label><br />\n                    <ThemeButtonsList themes={data.themes} defaultValue={this.state.selectedTheme} onChange={this.handleThemeChange}/>\n                  </div>\n                  <div className=\"form-group\">\n                    <label>themes in</label><br />\n                    <LanguageCheckboxesList languages={data.languages} defaultValue={this.state.selectedLanguages} onChange={this.handleLanguagesChange}/>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-footer\">\n                <div className=\"form-inline\">\n                  <SearchButton plainSearchQuery={this.state.plainSearchQuery} selectedDatabase={this.state.selectedDatabase} />\n                  <div className=\"input-group mb-1 mt-1\">\n                    <DatabaseSelector databases={data.databases} defaultValue={this.state.selectedDatabase} onChange={this.handleDatabaseChange}/>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <SaveDefaultsBar selectedTheme={this.state.selectedTheme} selectedLanguages={this.state.selectedLanguages} selectedDatabase={this.state.selectedDatabase} />\n          </div>\n          <div className=\"col-md mt-3 mb-3\">\n            <SearchQueryPanel searchQuery={this.state.searchQuery} />\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <p>Search across linguistic barriers for scholarly works that engage with counterhegemonic intellectual traditions.</p>\n                <p>This tool composes a <em>hyperquery</em>, an augmented search query that uses <span className=\"query-preview\">Boolean logic</span> to combine <span className=\"dynamic\">automatic translations</span> of your search terms with <span className=\"static\">curated terms</span> in each language.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass TermsInput extends Component {\n  render() {\n    return (\n      <DebounceInput\n        minLength={2}\n        debounceTimeout={250}\n        onChange={this.props.onChange}\n        onKeyDown={this.props.onKeyDown}\n        value={this.props.defaultValue.join(\" \")}\n        autoFocus={true}\n        id=\"terms-input\"\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Type search terms, e.g., linguistics metaphor\"\n      />\n    );\n  }\n}\n\nclass ThemeButton extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event, this.props.id);\n  }\n\n  render() {\n    const htmlId = \"theme-button-\" + this.props.id;\n    return (\n      <div className=\"custom-control custom-radio custom-control-inline\">\n        <input\n          id={htmlId}\n          onChange={this.handleChange}\n          checked={this.props.defaultValue}\n          name=\"theme-buttons\"\n          type=\"radio\"\n          className=\"custom-control-input\"\n        />\n        <label\n          htmlFor={htmlId}\n          className=\"custom-control-label\"\n        >\n          {this.props.name}\n        </label>\n      </div>\n    );\n  }\n}\n\nclass ThemeButtonsList extends Component {\n  render() {\n    const buttons = [];\n    for (let id in this.props.themes) {\n      buttons.push(\n        <ThemeButton\n          key={id}\n          id={id}\n          name={this.props.themes[id]}\n          defaultValue={this.props.defaultValue === id}\n          onChange={this.props.onChange}\n        />\n      );\n    }\n    return buttons;\n  }\n}\n\nclass LanguageCheckbox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: this.props.defaultValue\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.checked, this.props.id);\n    this.setState({\n      isChecked: event.target.checked\n    });\n  }\n\n  render() {\n    const htmlId = \"language-checkbox-\" + this.props.id;\n    return (\n      <div className=\"custom-control custom-checkbox custom-control-inline\">\n        <input\n          id={htmlId}\n          checked={this.state.isChecked}\n          onChange={this.handleChange}\n          type=\"checkbox\"\n          className=\"custom-control-input\"\n        />\n        <label\n          htmlFor={htmlId}\n          className=\"custom-control-label\"\n        >\n          {this.props.name}\n        </label>\n      </div>\n    );\n  }\n}\n\nclass LanguageCheckboxesList extends Component {\n  render() {\n    const buttons = [];\n    for (let id in this.props.languages) {\n      buttons.push(\n        <LanguageCheckbox\n          key={id}\n          id={id}\n          name={this.props.languages[id][\"name\"]}\n          englishName={this.props.languages[id][\"name_en\"]}\n          defaultValue={this.props.defaultValue[id]}\n          onChange={this.props.onChange}\n        />\n      );\n    }\n    return buttons;\n  }\n}\n\nclass DatabaseSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedId: this.props.defaultValue\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.value);\n    this.setState({\n      selectedId: event.target.value\n    });\n  }\n  render() {\n    const options = [];\n    for (let id in this.props.databases) {\n      options.push(\n        <option\n          key={id}\n          value={id}\n        >\n          {this.props.databases[id][\"name\"]}\n        </option>\n      );\n    }\n    return (\n      <select\n        value={this.state.selectedId}\n        onChange={this.handleChange}\n        className=\"form-control\"\n      >\n        {options}\n      </select>\n    );\n  }\n}\n\nclass SearchButton extends Component {\n  render() {\n    if (this.props.plainSearchQuery) {\n      let path = data.databases[this.props.selectedDatabase][\"base_url\"] + encodeURIComponent(this.props.plainSearchQuery);\n      return (\n        <a href={path}>\n          <button className=\"btn btn-success mr-3 mb-1 mt-1\">Search</button>\n        </a>\n      );\n    } else {\n      return <button type=\"button\" disabled={true} className=\"btn btn-secondary disabled mr-3 mb-1 mt-1\">Search</button>;\n    }\n  }\n}\n\nclass SaveDefaultsBar extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    return null;\n  }\n\n  render() {\n    let languageIds = [];\n    for (let id in data.languages) {\n      if (this.props.selectedLanguages[id]) {\n        languageIds.push(id);\n      }\n    }\n    let path = process.env.PUBLIC_URL + \"/?theme=\" + (this.props.selectedTheme || \"\") + \"&languages=\" + languageIds.join(\",\") + \"&database=\" + (this.props.selectedDatabase || \"\");\n    return (\n      <div className=\"input-group input-group-sm mt-3\">\n        <div className=\"input-group-prepend\">\n          <span className=\"input-group-text\">Save defaults</span>\n        </div>\n        <input\n          value={path}\n          onChange={this.handleChange}\n          type=\"text\"\n          className=\"form-control text-monospace\"\n        />\n      </div>\n    );\n  }\n}\n\nclass SearchQueryPanel extends Component {\n  render() {\n    if (this.props.searchQuery) {\n      return (\n        <div className=\"card mb-3\">\n          <div className=\"card-body\">\n            <code className=\"query-preview\">\n              <div>{this.props.searchQuery}</div>\n            </code>\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction About() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-6 mt-3 mb-3\">\n          <h2>About</h2>\n          <p><Link to=\"/\">Hyperquery</Link> is an experimental search tool for academic literature. Its purpose is to facilitate searching across linguistic barriers for scholarly works that engage with counterhegemonic intellectual traditions.</p>\n          <p>We welcome questions and suggestions, as well as contributions of curated terms in any language. Contact us at <a href=\"mailto:hyperquery@mit.edu\">hyperquery@mit.edu</a>.</p>\n          <h4>How it works</h4>\n          <ul>\n            <li>Search terms are case sensitive. For example, the tool finds translations for <code className=\"dynamic\">biology</code> but not for <code className=\"dynamic\">Biology</code>, and for <code className=\"dynamic\">Soviet</code> but not for <code className=\"dynamic\">soviet</code>.</li>\n            <li>Search terms should be separated by spaces, for example <code className=\"dynamic\">modernism architecture utopia</code>.</li>\n            <li>A search term may consist of multiple words inside quotes, for example <code className=\"dynamic\">\"Turing machine\"</code>.</li>\n            <li>Automatic translations are provided by <a href=\"https://www.wiktionary.org/\">Wiktionary</a>.</li>\n            <li>At this time, search terms should be in English for automatic translations to appear. We intend to support more languages in the future, but non-English editions of Wiktionary have significantly less translations available.</li>\n            <li>The tool supports both the inclusion and the exclusion of curated terms. For example, the tool may search for works that include the term <code className=\"static\">\"critical race\"</code> but that exclude <code className=\"static\">\"race relations\"</code>, since the latter tends to pick out outdated literature (note the operator <code className=\"query-preview\">NOT</code>).</li>\n            <li>For a primer on Boolean operators (<code className=\"query-preview\">AND</code>, <code className=\"query-preview\">OR</code>, <code className=\"query-preview\">NOT</code>), see this <a href=\"https://libguides.mit.edu/c.php?g=175963&p=1158594\">guide</a> from the MIT Libraries.</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}